LOCALE CLASSES

To deal with different locales and strings LIMB uses locale and strings classes(LIMB_DIR/core/lib/locale/ directory).
* locale class is used for date, currency and numeric data formatting.
ini-files for different locale settings are stored in 
LIMB_DIR/core/locale directory.
* strings class is used for localized strings resolving. ini-files with
localized strings could be found at:
	1) PROJECT_DIR/core/strings
	2) LIMB_DIR/core/strings
For now we have localized strings for English and Russian languages. 
The common usage of the strings class is:

	echo strings :: get($string_name, [$file_name='common'], [$language_id=null]);

$file_name is mapped to physical file by schema(order is preserved): 
	1) 'PROJECT_DIR/core/strings' . $file_name . '_' . language_id . '.ini'
	2) 'LIMB_DIR/core/strings' . $file_name . '_' . language_id . '.ini'

If no file found the critical error is risen.

The common format of the localized ini file as follows:

[[extends]
filename = some_inherited_file]

[constants]
attribute1 = ...
attribute2 = ...
...

Localized ini files support simple inheritance with [extends] section: you have to supply 'filename' property in it to let strings class handle inheritance issues. Simple example, contents of ad_en.ini file:

[extends]
filename = common

[constants]
create_ad_block = Create ad block
ad_block_creation  = Ad block creation
ad_block_edition  = Ad block edition
edit_ad_block = Edit ad block


LOCALE CONSTANTS

LIMB uses two constants to deal with localization:
1) CONTENT_LOCALE_ID - current site object's locale.
2) MANAGEMENT_LOCALE_ID - current user's preferred locale. It is used for 
localized mamagement messages, validation errors, action names etc.

Each LIMB site object has its locale id (e.g 'en' or 'ru'). It is stored 
in the sys_site_object table (see URL db_organization_chart). 
Every new object inherits from its parent locale id by default.
At the moment we don't have a nice GUI for setting site object's locale id(this is planned).

CONTENT_LOCALE_ID is defined with mapped to request object's locale id when object is fetched in the root.

There's a trick about defining MANAGEMENT_LOCALE_ID:

MANAGEMENT_LOCALE_ID constant is stored in the user session. If 
MANAGEMENT_LOCALE_ID is not defined (in case it's a new visitor or 
user executed logout action), then MANAGEMENT_LOCALE_ID is defined
as CONTENT_LOCALE_ID.

User can set preferred MANAGEMENT_LOCALE_ID during logging into a site.

It is also possible to switch MANAGEMENT_LOCALE_ID using the upper-right form in the administrative part of the site.

The list of available locales is defined by global variable in setup.php
in the PROJECT_DIR. The valid example is:

$AVAILABLE_LOCALES = array('ru', 'en'); 

Let's see how and where these locale constants are used.

* MANAGEMENT_LOCALE_ID - default value used in strings :: get(...)

* CONTENT_LOCALE_ID - default value in locale :: instance();

* Tag <locale:STRING name='string_name' file='strings_file_name' locale_type='{management|content}'> by default MANAGEMENT_LOCALE_ID

* Tag <locale:DATE_FORMAT hash_id='var_name' format='format_type' type='{stamp|string}' locale_type='{management|content}'> by default CONTENT_LOCALE_ID
 
* Tag <locale:LOCALE name='locale_name' locale_type='{management|content}'> by default CONTENT_LOCALE_ID

* Any form input tag (e.g. INPUT, BUTTON etc.) has locale_type, 
	locale_value, locale_file attributes to set localized values, by default MANAGEMENT_LOCALE_ID

* <metadata:CHARSET> renders page charset, uses MANAGEMENT_LOCALE_ID only

* All form validation errors are rendered with MANAGEMENT_LOCALE_ID

This all proved to be useful for creating muiltilanguage sites with LIMB.