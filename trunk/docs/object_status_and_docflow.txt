Every LIMB site_object has its status. In essence it's just a bit mask.
At the moment we use status to know if the object is 
published or not(document, article, poll etc), however we may add some more bit fields in the future.

Status and flexible access policy permits to create complex doc flow systems on LIMB easily.

Let's play around a bit with the LIMB document flow.
Usually LIMB implements pretty straight forward docflow with publish, unpublish actions.

We believe that there is generally no need to make simple things too complex.
To understand LIMB docflow principles you have to understand LIMB access 
policy and especially access templates for actions.
In LIMB terms, docflow is just about changing object's status
and applying access templates. 
So publishing of the specific article is just setting published status bit and writing new access rights
for the object. 

For example, site administrator can set the following access template for publish and unpublish 
actions: 
1) 'r' for visitors and 'rw' for admins when object is published 
2) no access for visitors(object becomes invisible and inaccessible) and 'rw' for admins when object is unpublished 

This simple scheme permits implementing a complex chain 
of responsibilities for some type of objects. For example,
a journalist creates an article and click 'check by editor' action.
The article becomes accessible for editors for editing and gets some imaginary NEED_EDITOR_APPROVAL_STATUS value(this one actually to be summed with status field using OR). 
After that any editor may check the article and click 'check by boss' action.
The article becomes accessible for bosses to modify and
not any more accessible for journalists and gets
NEED_BOSS_APPROVAL_STATUS value(one more bit field). The boss can publish the article.
Only the boss has full access for article. The article finally gets the SITE_OBJECT_PUBLISHED_STATUS value.
To implement such scheme you need to create special
article class + controller + actions to change status +
templates to display articles for different actions. 
That's it.