Для работы с языковыми константами и локалями LIMB использует классы 
locale и string, которые хранятся в каталоге LIMB_DIR/core/lim/locale.
Locale класс используется для форматирования дат, денежных и числовых величин. Ini-файлы с настройками для различных locale_id хранятся в каталоге LIMB_DIR/core/locale.

Локализованные строки получаются при помощи метода get (string_name, file_name, language_id) класса strings. Ini-файлы со строками лежат в каталоге PROJECT_DIR/core/strings и LIMB_DIR/core/strings. В настоящий момент строки переведены только на английский(насколько это было возможно) и на русский языки. При получении строки поиск сначала ведется в файлах проекта, затем в LIMB. Если файл со строками не найден, то будет сгенерирована ошибка (запись в error.log). Если не найдена только строка, то будет сгенерировано предупреждение (warning.log).

LIMB использует 2 языковые константы для вывода работы с локалями:
1) CONTENT_LOCALE_ID – локаль для работы с текущим документом.
2) MANAGEMENT_LOCALE_ID – локаль для вывода служебных сообщений (названия действий, сообщения на формах при валидации и т.д.)

Каждый объект LIMB характеризуется своим LOCALE_ID. При создании нового объекта он наследует LOCALE_ID от своего родителя. Пока нет пользовательского интерфейса для задания LOCALE_ID для объекта. При определении root-ом, с каким объектом пользователь работает в настоящее время, CONTENT_LOCALE_ID определяется по LOCALE_ID текущего объекта.

MANAGEMENT_LOCALE_ID – обычно хранится в сессии с пользовательскими данными. Если для текущего пользователя сессия вновь создана, то MANAGEMENT_LOCALE_ID будет равен CONTENT_LOCALE_ID. При аутентификации пользователь может сменить свой MANAGEMENT_LOCALE_ID. Для этого на форме аутентификации есть соответствующее поле. Также MANAGEMENT_LOCALE_ID можно сменить используя форму, подобную той, что расположена верхнем правом углу демо-сайта. Для того чтобы сменить MANAGEMENT_LOCALE_ID пользователь должен иметь доступ к действию change_user_locale. Список доступных локалей хранится в переменной 
$AVAILABLE_LOCALES = array('ru', ‘en’); 

Рассмотрим теперь, где и как используются эти две константы.

MANAGEMENT_LOCALE_ID используется по умолчанию в strings классе.

CONTENT_LOCALE_ID используется по умолчанию в locale классе.

Тег <locale:STRING name=’string_name’ file=’strings_file_name’ locale_type=’{management|content}’> MANAGEMENT_LOCALE_ID используется по умолчанию

Тег < locale:DATE_FORMAT hash_id=’var_name’ format=’format_type’ type=’{stamp|string}’ locale_type=’{management|content}’> CONTENT_LOCALE_ID используется по умолчанию.

Тег < locale:LOCALE name=’locale_name’ locale_type=’{management|content}’> CONTENT_LOCALE_ID используется по умолчанию.

Any control tag (e.g. INPUT, BUTTON etc.) can use locale_type, locale_value, locale_file to set control value. MANAGEMENT_LOCALE_ID используется по умолчанию

MANAGEMENT_LOCALE_ID используется для вывода charset страницы в теге metadata:CHARSET

Все сообщения об ошибках в формах также выводятся, используя MANAGEMENT_LOCALE_ID для получения строк.

Используемые значения по умолчанию выбирались из того, какие из них используются более часто. Мы не планировали реализацию поддержки языков как-то по-особенному. То, что получилось – результат плавной эволюции. Вы будем только рады, если у вас есть какие-либо предложения для модификаций и улучшений.

Здесь можно узнать как можно при помощи LIMB построить мультиязычный сайт.






