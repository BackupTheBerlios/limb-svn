Разрешение имен и система шаблонов.

С самого начала LIMB развивался как система для создания на ней различных проектов с 
использованием одной копии LIMB_DIR. Поэтому схема разрешения имен файлов 
работает по принципу – сначала ищем в проекте, затем ищем в LIMB_DIR. Из-за этого 
подхода структуры каталогов в проекте и в LIMB_DIR должны совпадать (подробнее о 
файловой структуре можно прочитать на соответствующей странице).

По данной схеме работают:
1)	Создание экземпляров почти всех классов через фабрики, например, 
db_table_factory, action_factory, site_object_factory. Для этого они используют класс 
objects_support в каталоге LIMB_DIT/core/lib/system для поиска файла с 
определением класса.
2)	strings класс в каталоге LIMB_DIT/core/lib/locale. По данной схеме он ищет ini-
файлы с локализованными строками (/core/strings)
3)	ini класс в каталоге LIMB_DIT/core/lib/utils для поиска ini-файлов с настройками 
(/core/settings).
4)	Create методы некоторых классов, например, site_object_controller. Также 
используется класс objects_support в каталоге LIMB_DIT/core/lib/system.

То есть, теоретически, если вам нужна, скажем, новая функциональность какого-либо 
класса, вы можете откопировать файл и сделать необходимые изменения. Мы используем 
данное свойство для расширения функциональности некоторых контроллеров, файлов со 
строками и с настройками. Однако пользоваться такой практикой нужно осторожно. В 
будущем, возможно, от такой практики мы откажемся и перейдем на пакеты, тогда все 
необходимые файлы всегда будут лежать в проекте, а LIMB будет просто библиотекой 
необходимых классов.

В целом по этой же схеме, только слегка модифицированной работает механизм 
разрешения имен в шаблонной системе. Он пытается учитывать локализацию в процессе 
компиляции. Механизм здесь такой:

1) поиск в PROJECT_DIR . '/design/main/templates/_' . CONTENT_LOCALE_ID + 
$file_relative_path
2) поиск в PROJECT_DIR . '/design/main/templates/ + $file_relative_path
3) поиск в PROJECT_DIR . '/design/main/templates/_' . CONTENT_LOCALE_ID + 
$file_relative_path
4) поиск в PROJECT_DIR . '/design/main/templates/ + $file_relative_path
5) поиск в PROJECT_DIR . '/templates/_' . CONTENT_LOCALE_ID + $file_relative_path
6) поиск в PROJECT_DIR . '/templates/ + $file_relative_path

Учтите, что нельзя допускать ситуации, когда файл может быть найден только при работе 
с определенным языком, например, файл type_tables.html у вас лежит в каталоге 
PROJECT_DIR/templates/_ru/ и больше его нигде нет. В этом случае будет неправильно 
использовать такую конструкцию:
	<locale:LOCALE name='ru'>
		<core:INCLUDE file='type_tables.html'>
	</locale:LOCALE>
Правильно:
	<locale:LOCALE name='ru'>
		<core:INCLUDE file=/_ru/type_tables.html'>
	</locale:LOCALE>
Помните, что все разрешения файловых имен для тегов
<core:INCLUDE file=’’> работают только на этапе компиляции, а не на этапе исполнения.

В будущем мы планируем ввести возможность работы с темами. 
