Создание нового класса объектов сайта.

План. 

1. Планирование объекта. Какие атрибуты необходимы для нового объекта.
2. Создание класса объекта.
3. Создание db_table для него.
4. Создание для него простого контроллера. Необходимость указания, что необходимо сделать действие для родительского класса для того, чтобы можно было создавать объекты нового класса.
5. Создание ini-файлов для хранения стрингов.
6. Создание для него классов-действий для добавления, редактирования и удалению.
7. Создание шаблонов для администрирования, отображения, редактирования, публикации.
8. Добавление объекта на сайт при помощи create_object или же действия родителя. Настройка прав доступа и все такое.

Допустим, нам необходимо на сайте вести каталог. Каталог будет представлять из себя несколько уровней папок с элементами каталога. То есть для того, чтобы реализовать каталог нам потребуется создать 2 контентных класса: some_catalog_folder и some_catalog_object.
Some_catalog_folder будет обычным объектом, будет наследован от site_object, поэтому не будет иметь дополнительных атрибутов. Some_catalog_object будет иметь дополнительные (кроме идентификатора и заголовка) атрибуты, поэтому будет отнаследован от content_object-а. Some_catalog_object будет следующие атрибуты:
1) description
2) price
3) image_id – для хранения индекса изображения.

Создание классов модели
Классы объектов будут выглядеть следующим образом:

require_once(LIMB_DIR . 'core/model/site_objects/site_object.class.php');

class some_catalog_folder extends site_object
{
	function some_catalog_folder ()
	{
		parent :: site_object();
	}
	
	function _define_class_properties()
	{
		return array(
			'class_ordr' => 1, // sorting index in tree
			'can_be_parent' => 1,
			'controller_class_name' => 'some_catalog_folder_controller',
			'icon' => '/shared/images/folder.gif' // icon to display in tree
		);
	}

}

------------------------------------------------------------------------------------------------------
require_once(LIMB_DIR . 'core/model/site_objects/content_object.class.php');
require_once(LIMB_DIR . 'core/model/shop/cart_item.class.php');

class some_catalog_object extends content_object
{
	function some_catalog_object()
	{
		parent :: content_object();
	}

	function _define_attributes_definition()
	{
		return complex_array :: array_merge(
				parent :: _define_attributes_definition(),
				array(
					'description’ => array('search' => true, 'search_weight' => 1),
				));
	}

	function _define_class_properties()
	{
		return array(
			'ordr' => 1,
			'can_be_parent' => 0,
			'controller_class_name' => 'catalog_object_controller',
       'auto_identifier' => true
		);
	}
}

Обратите внимание, что для some_catalog_object указано свойство auto_identifier. Это значит, что идентификатор будет присваиваться новым объектам автоматически.

Создание db_table классов

Так как some_catalog_object является потомком, то для хранения дополнительных полей он будет использовать один из классов db_table. По умолчанию он будет использовать класс с именем some_catalog_object_db_table. Название класса можно указать явно строкой ‘db_table_name’ => ‘some_other_db_table’ в методе _define_class_properties(). Учтите, что название класса следует указывать без приставки _db_table.

Итак, класс some_catalog_object_db_table будет выглядеть так:

require_once(LIMB_DIR . 'core/db_tables/content_object_db_table.class.php');

class some_catalog_object_db_table extends content_object_db_table
{
  function some_catalog_object_db_table()
  {
    parent :: content_object_db_table();
  }
  
  function _define_columns()
  {
  return array(
      'image_id' => array('type' => 'numeric'),
      'description' => '',
      'price' => array('type' => 'numeric'),
    );
  }
}

Описания атрибута используются для приведения типов. Если тип не указан, то значение преобразуется в строку. Полный список таков:
* numeri
* string
* boolean
* date
* datetime

По умолчанию класс будет работать с таблицей some_catalog_object. Вы можете переопределить название таблицы путем переопределения метода _define_db_table_name():

  function _define_db_table_name()
  {
  	return 'some_other_name';
  }

Создание контроллеров.

Контроллеры определяют функциональность объекта. Наш some_catalog_folder будет иметь отображать себя, отображать себя в административном списке, редактироваться, удаляться, создавать дочерние some_catalog_folder и some_catalog_object. Для упрощения мы не вводили в него поддержку документооборота, то есть действия для публикации.

require_once(LIMB_DIR . 'core/controllers/site_object_controller.class.php');
	
class some_catalog_folder_controller extends site_object_controller
{
	function some_catalog_folder_controller()
	{
		$this->_actions = array(
				'display' => array(
						'permissions_required' => 'r',
						'template_path' => '/ some_catalog_folder/display.html'
				),
				'admin_display' => array(
						'permissions_required' => 'rw',
						'template_path' => '/ some_catalog_folder/admin_display.html'
				),
				'create_ some_catalog_folder' => array(
						'permissions_required' => 'w',
						'template_path' => '/ some_catalog_folder/create.html',
						'action_path' => '/ some_catalog_folder/create_ some_catalog_folder_action',
						'JIP' => true,
						'popup' => true,
						'img_src' => '/shared/images/new.folder.gif',
						'action_name' => strings :: get('create_catalog_folder', 'catalog'),
						'can_have_access_template' => true,
				),
				'create_ some_catalog_object' => array(
						'permissions_required' => 'w',
						'template_path' => '/ some_catalog_object/create.html',
						'action_path' => '/ some_catalog_object/create_ some_catalog_object_action',
						'JIP' => true,
						'popup' => true,
						'img_src' => '/shared/images/new.generic.gif',
						'action_name' => strings :: get('create_catalog_object', 'catalog'),
						'can_have_access_template' => true,
				),
				'edit' => array(
						'permissions_required' => 'w',
						'template_path' => '/ some_catalog_folder/edit.html',
						'action_path' => '/ some_catalog_folder/edit_ some_catalog_folder_action',
						'JIP' => true,
						'popup' => true,
						'img_src' => '/shared/images/edit.gif',
						'action_name' => strings :: get('edit_catalog_folder', 'catalog'),
				),
				'delete' => array(
						'permissions_required' => 'w',
						'JIP' => true,
						'popup' => true,
						'action_name' => strings :: get('delete_catalog_folder', 'catalog'),
						'action_path' => '/ some_catalog_folder/delete_ some_catalog_folder_action',
						'template_path' => '/site_object/delete.html',
						'img_src' => '/shared/images/rem.gif'
				),
		);
 		
		parent :: site_object_controller();
	}
}

permissions_reqired указывает на необходимый уровень доступа к объекту для выполнения действия,
 ‘JIP’ – указывает, что действие будет отображаться в списках доступных действий для объекта. action_path указывает на относительный путь до класса действия, через которое оно будет реализовываться.
Popup признак указывает на то, что для исполнения действия будет открыто новое окно. 
Template_path – указывает на относительный путь до файла с шаблоном, который будет использован для визуазации действия.

Далее идет контроллер для some_catalog_object

class some_catalog_object_controller extends site_object_controller
{
	function some_catalog_object_controller()
	{
		$this->_actions = array(
				'display' => array(
						'permissions_required' => 'r',
						'template_path' => '/ some_catalog_object/display.html',
				),
				'admin_display' => array(
						'permissions_required' => 'rw',
						'template_path' => '/ some_catalog_object/admin_display.html'
				),
				'edit' => array(
						'permissions_required' => 'w',
						'popup' => true,
						'JIP' => true,
						'action_name' => strings :: get('edit_catalog_object', 'catalog'),
						'action_path' => '/ some_catalog_object/edit_ some_catalog_object_action',
						'template_path' => '/ some_catalog_object/edit.html',
						'img_src' => '/shared/images/edit.gif'
				),
				'publish' => array(
						'permissions_required' => 'w',
						'popup' => true,
						'JIP' => true,
						'action_name' => strings :: get('publish'),
						'action_path' => '/doc_flow_object/set_publish_status_action',
						'img_src' => '/shared/images/publish.gif',
						'can_have_access_template' => true,
				),
				'unpublish' => array(
						'permissions_required' => 'w',
						'popup' => true,
						'JIP' => true,
						'action_name' => strings :: get('unpublish'),
						'action_path' => '/doc_flow_object/set_publish_status_action',
						'img_src' => '/shared/images/unpublish.gif',
						'can_have_access_template' => true,
				),
				'delete' => array(
						'permissions_required' => 'w',
						'JIP' => true,
						'popup' => true,
						'action_name' => strings :: get('delete_catalog_object', 'catalog'),
						'action_path' => '/catalog_object/delete_catalog_object_action',
						'template_path' => '/site_object/delete.html',
						'img_src' => '/shared/images/rem.gif'
				),
		);
 		
		parent :: site_object_controller();
	}
}

ini-files для стрингов.

Как уже видно из определения действия, мы не создавали дополнительные файлы, а использовали уже существующие файлы из LIMB_DIR. Файл строковых констант мог бы выглядеть приблизительно так:

[extends]

filename=catalog

[constants]
catalog_object= Some catalog object
catalog_folder=Some catalog folder
image = Image
description=Description
price=Price
// some more string here

Создание классов действий.

Класс для создания новой папки каталога будет выглядеть так:
require_once(LIMB_DIR . 'core/actions/form_create_site_object_action.class.php');

class create_some_catalog_folder_action extends form_create_site_object_action
{
	function create_some_catalog_folder_action()
	{
		$definition = array(
			'site_object' => 'some_catalog_folder',
		);
		
		parent :: form_create_site_object_action('create_some_catalog_folder', $definition);
	}
	
	function _init_validator()
	{
		parent :: _init_validator();

		$this->validator->add_rule(new required_rule('title'));
	}
}

Класс действия для удаления папок.

require_once(LIMB_DIR . 'core/actions/form_delete_site_object_action.class.php');

class delete_some_catalog_folder_action extends form_delete_site_object_action
{
	function delete_some_catalog_folder_action($name='delete_form')
	{		
		parent :: form_delete_site_object_action($name, array('site_object' => 'some_catalog_folder'));
	}
}

Класс действия для создания нового объекта каталога.
class create_some_catalog_object_action extends form_create_site_object_action
{
	function create_some_catalog_object_action()
	{
		$definition = array(
			'site_object' => 'some_catalog_object',
			'datamap' => array(
				'price' => 'price',
				'description' => ' description ',
				'image_id' => 'image_id'
			)
		);
		
		parent :: form_create_site_object_action('some_catalog_object_form', $definition);
	}
	
	function _init_validator()
	{
		parent :: _init_validator();

		$this->validator->add_rule(new required_rule('title'));
		$this->validator->add_rule(new required_rule('description'));
		$this->validator->add_rule(new required_rule('price'));
	}
}

datamap свойство показывает какие поля из запроса должны быть пойманы и в какие атрибуты объекты они должны быть записаны.

Остальные классы приводить не будем.

Создание шаблонов.

Шаблонно admin_display.html для some_catalog_folder.

<core:WRAP file="admin/admin_display_page.html" placeholder="content">

<span class=jip>
<fetch:MAPPED>
<core:INCLUDE file="jip_actions/extended.html">
</fetch:MAPPED>
</span>

<fetch:SUB_BRANCH target='folders'>
	<core:PARAMETER name='loader_class_name' value='some_catalog_folder'>
	<core:PARAMETER name='order' value='priority=ASC'>
</fetch:SUB_BRANCH>

<fetch:SUB_BRANCH target='some_catalog_objects'>
	<core:PARAMETER name='loader_class_name' value='some_catalog_object'>
	<core:PARAMETER name='order' value='priority=ASC'>
</fetch:SUB_BRANCH>

<grid:LIST id='folders'>
<table width=100%>
<tr>
	<th><grid:SELECTORS_TOGGLER></th>
	<th><locale:STRING name='catalog_folder' file='catalog'></th>
	<th><locale:STRING name='modified_date'></th>
	<th><locale:STRING name='items_order'></th>
	<th><locale:STRING name='actions'></th>
</tr>
<grid:ITERATOR>
<tr class="jip">
<td><core:INCLUDE file="/admin/selector.html"></td>
<td jip='object'><a href='{$path}?action=admin_display'>{$title}({$children})</a></td>
<td><locale:DATE_FORMAT hash_id='modified_date' type='stamp' locale_format='short_date_time'></td>
<td><core:INCLUDE file='/admin/priority_input.html'></td>
<td jip='action'><core:INCLUDE file="jip_actions/normal.html"></td>
</tr>
</grid:ITERATOR>
<tr>
	<td colspan='4' align='left'><core:INCLUDE file='/admin/delete_button.html'></td>
	<td colspan='2'><core:INCLUDE file='/admin/priority_button.html'></td>
</tr>
</table>
</grid:LIST>

<core:INCLUDE file="pager.html">

<grid:LIST id='some_catalog_objects'>
<table width=100%>
<tr>
	<th><grid:SELECTORS_TOGGLER></th>
	<th><locale:STRING name='published_status'></th>
	<th><locale:STRING name='catalog_object' file='catalog'></th>
	<th><locale:STRING name='modified_date'></th>
	<th><locale:STRING name='items_order'></th>
	<th><locale:STRING name='actions'></th>
</tr>
<grid:ITERATOR>
<tr class="jip">
<td><core:INCLUDE file="/admin/selector.html"></td>
<td><core:INCLUDE file="published_status.html"></td>
<td jip='object'><a href='{$path}?action=admin_display'>{$title}</a></td>
<td><locale:DATE_FORMAT hash_id='modified_date' type='stamp' locale_format='short_date_time'></td>
<td><core:INCLUDE file='/admin/priority_input.html'></td>
<td jip='action'><core:INCLUDE file="jip_actions/normal.html"></td>
</tr>
</grid:ITERATOR>
<tr>
	<td colspan='4' align='left'><core:INCLUDE file='/admin/delete_button.html'></td>
	<td><core:INCLUDE file='/admin/priority_button.html'></td>
	<td><core:INCLUDE file='/admin/toggle_publish_status_button.html'></td>
</tr>
</table>
</grid:LIST>

Шаблон содержит 2 списка для отображения дочерних папок и обычных элементов.

<fetch:SUB_BRANCH> получает из базы данных список объектов указанного класса. По умолчанию с текущего пути на глубину 1 и передает это в target. <grid:LIST> - используется для вывода списковых и табличных данных. <grid:LIST> и  <grid:ITERATOR> исполняется, если в списке есть хотя бы они элемент, в противном случае отображается содержимое <grid:DEFAULT>, если оно есть. Более подробно о назначении тегов можно узнать в соответствующем разделе документации.

Далее шаблон для создания новой папки.

<core:WRAP file="popup.html" placeholder="content">
<h2><locale:STRING name='catalog_folder_creation' file='catalog'></h2>
<form method="post" name="create_some_catalog_folder" id="create_some_catalog_folder">
  <table width="100%" border="0" cellspacing="2" cellpadding="3">
		<core:INCLUDE file='/admin/admin_form_items/folder_form_fields.html'>
    <tr>
      <td colspan=2 align=center height=30><action_button action="create_some_catalog_folder" name="create" type="submit" id="create" locale_value="create" class="button">
      &nbsp;
      <input name="cancel" type="button" id="cancel" locale_value="close" onclick='window.close();' class="button">
      </td>
    </tr>
  </table>
</form>

Это стандартный шаблон для любой папки.  /admin/admin_form_items/folder_form_fields.html содержит все необходимые поля.

Теперь шаблоны для some_catalog_object

Шаблон для создания нового объекта каталога.
<core:WRAP file="popup.html" placeholder="content">

<form method="post" name="catalog_object_form" id="catalog_object_form">
	<table width=100% border=0 cellspacing=0 cellpadding=0 height=100%>
	<tr>
		<td colspan=2 class=table-title><locale:STRING name='catalog_object_creation' file='catalog'> <h1>"<fetch:MAPPED>{$title}</fetch:MAPPED>"</h1></td>
	</tr>
	<tr>
		<td colspan=2 height=100% valign=top class=com4>
				<core:INCLUDE file="/some_catalog_object/form_fields.html">
		</td>
	</tr>
	<core:INCLUDE file='/admin/admin_form_items/req_info.html'>
  <tr>
    <td colspan=2 align=center height=30><action_button action="create_catalog_object" name="create" type="submit" id="create" locale_value="create" class="button">
    &nbsp;
    <input name="cancel" type="button" id="cancel" locale_value="close" onclick='window.close();' class="button">
    </td>
  </tr>
	</table>	
</form>

Теперь содержимое шаблона /some_catalog_object/form_fields.html

	<table width=100% border=0 cellspacing=0 cellpadding=0 height=100%>
	<tr>
		<td height=1%>
			<!--BEGIN: tab-->
			<table width=100% border=0 cellspacing=0 cellpadding=0 id=tabulator active=param_req class=tabulator>
			<col span=100 valign=bottom class=form>
			<tr>
				<td class=tab>&nbsp;</td>
				<td id=param_req_box class=tab-active>
					<table border=0 cellspacing=0 cellpadding=0 height=100%>
					<tr>
						<td nowrap class=label-active id=param_req><a href='JavaScript:void(0);'><locale:STRING name='properties'></a></td>
					</tr>
					</table>	
				</td>
				<td class=tab id=param_text_box>
					<table border=0 cellspacing=0 cellpadding=0 height=100%>
					<tr>
						<td nowrap class=label id=param_text><a href='JavaScript:void(0);'><locale:STRING name='content'></a></td>
					</tr>
					</table>	
				</td>
				<td class=tab width=100%>&nbsp;</td>
			</tr>
			</table>	
			<!--END: tab-->
		</td>
	</tr>
	<core:INCLUDE file='/admin/admin_form_items/errors.html'>
	<tr>
		<td height=100% valign=top>
		
					<!--BEGIN: tab №1-->
				  <table width="100%" border="0" cellspacing="0" cellpadding="0" style='padding:5px 10px 1px 5px;' id=param_req_content>
				  	<col align=right width=200 class=labels>
							<core:INCLUDE file='/admin/admin_form_items/parent_select.html'>
													<core:INCLUDE file='/admin/admin_form_items/title.html'>
							<core:INCLUDE file='/admin/admin_form_items/image_select.html'>

<tr>
  <td><label for="price"><span class='req'>*</span><locale:STRING name=' price ' file=’catalog’></label></td>
  <td><input type="text" name="price" id="price" label="price" class='input' size='10'>
  </td>
</tr>
</table>
					<!--END: tab №1-->

					<!--BEGIN: tab №2-->
				  <table width="100%" border="0" cellspacing="3" cellpadding="0" height=100% id=param_text_content>
			    <tr>
			      <td colspan=2><richedit name="description" id="description" label="Description" rows="25" style='width:100%;'></richedit>
			      </td>
			    </tr>
				  </table>
					<!--END: tab №2-->

		</td>
	</tr>
	</table>	
<script>
	init_tab('param_req',	'tabulator', 'label', 'tab')
	init_tab('param_text',	'tabulator', 'label', 'tab','window.onresize()')
</script>

	<div id='popup_div'></div>
 
 Остальные шаблоны приводить не будет. Похожую реализацию можно посмотреть в LIMB_DIR для классов catalog_folder и catalog_object.
 

